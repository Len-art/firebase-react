import * as OBJ from "webgl-obj-loader";

export const rawPinObj = `# Blender v2.81 (sub 16) OBJ File: 'newPinHires.blend'
# www.blender.org
o Circle.001
v 1.000000 0.000000 0.000000
v 0.980785 -0.195090 0.000000
v 0.923880 -0.382683 0.000000
v 0.831470 -0.555570 0.000000
v 0.707107 -0.707107 0.000000
v 0.555570 -0.831470 0.000000
v 0.382683 -0.923880 0.000000
v 0.195090 -0.980785 0.000000
v 0.000000 -1.000000 0.000000
v -0.195090 -0.980785 0.000000
v -0.382683 -0.923880 0.000000
v -0.555570 -0.831470 0.000000
v -0.707107 -0.707107 0.000000
v -0.831470 -0.555570 0.000000
v -0.923880 -0.382683 0.000000
v -0.980785 -0.195090 0.000000
v -1.000000 0.000000 0.000000
v -0.980785 0.195091 0.000000
v -0.923879 0.382684 0.000000
v -0.831469 0.555571 0.000000
v -0.707106 0.707107 0.000000
v -0.555570 0.831470 0.000000
v -0.195089 1.040003 0.000000
v 0.000001 1.304193 0.000000
v 0.195091 1.040003 0.000000
v 0.555571 0.831469 0.000000
v 0.707108 0.707106 0.000000
v 0.831470 0.555569 0.000000
v 0.923880 0.382682 0.000000
v 0.980786 0.195089 0.000000
vt 1.234037 0.649843
vt 1.190017 0.790100
vt 1.119478 0.919075
vt 1.025135 1.031808
vt 0.910611 1.123971
vt 0.780306 1.192021
vt 0.639231 1.233341
vt 0.492803 1.246345
vt 0.346653 1.230533
vt 0.206396 1.186512
vt 0.077422 1.115975
vt -0.035313 1.021630
vt -0.127476 0.907106
vt -0.195526 0.776801
vt -0.236846 0.635725
vt -0.249850 0.489298
vt -0.234038 0.343148
vt -0.190017 0.202891
vt -0.119479 0.073916
vt -0.025135 -0.038818
vt 0.089391 -0.130982
vt 0.361297 -0.295115
vt 0.510082 -0.553871
vt 0.653873 -0.292306
vt 0.922579 -0.122983
vt 1.035314 -0.028639
vt 1.127477 0.085887
vt 1.195526 0.216191
vt 1.236846 0.357268
vt 1.249850 0.503693
s off
f 2/1 3/2 4/3 5/4 6/5 7/6 8/7 9/8 10/9 11/10 12/11 13/12 14/13 15/14 16/15 17/16 18/17 19/18 20/19 21/20 22/21 23/22 24/23 25/24 26/25 27/26 28/27 29/28 30/29 1/30
`;

// let's try to use mesh directly, read OBJ documentation
const mesh = new OBJ.Mesh(rawPinObj);

const group1dto2d = (n: number[]) =>
  n.reduce((a: number[][], v, i) => {
    if (i % 2) {
      a[a.length - 1][1] = v;
    } else {
      a.push([v]);
    }
    return a;
  }, []);

const groupedVertices = group1dto2d(
  mesh.vertices.filter((v, i) => (i + 1) % 3 !== 0)
);

const groupedTextureMap = group1dto2d(mesh.textures);

export default { mesh, groupedVertices, groupedTextureMap };
